import time
import yt_monster_py as yt_monster

def read_file(filename, line_number, task, new_value=None):
    try:
        with open(filename, 'r') as file:
            lines = file.readlines()
            if len(lines) == 0:
                if task == 'read':
                    return '', 'The file is empty'
                elif task == 'delete':
                    return '', 'The file is empty'
                elif task == 'replace':
                    lines.append('\n')
            elif line_number < 1 or line_number > len(lines):
                if task == 'replace' and line_number == len(lines) + 1:
                    lines.append('\n' * (line_number - len(lines) - 1))
                else:
                    raise ValueError(f'Line number {line_number} is out of range')
            if task == 'read':
                return lines[line_number-1].strip(), ''
            elif task == 'delete':
                del lines[line_number-1]
                with open(filename, 'w') as file:
                    file.writelines(lines)
                return '', f'Deleted line {line_number}: {lines[line_number-1]}'
            elif task == 'replace':
                if new_value is None:
                    raise ValueError('New value is not specified')
                if line_number == len(lines) + 1:
                    lines.append('\n' * (line_number - len(lines) - 1))
                lines[line_number-1] = new_value + '\n'
                with open(filename, 'w') as file:
                    file.writelines(lines)
                return '', f'Replaced line {line_number}: {new_value}'

    except FileNotFoundError:
        with open(filename, 'w') as file:
            file.write('')
            return '', 'File not found, created empty file'
    except ValueError as e:
        return '', f'Error: {str(e)}'

print('–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø—É—Å–∫–∞: 1.1 Beta –í–µ—Ä—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: ' + str(yt_monster.Version()) + ' –ß–µ–Ω–¥–∂ –ª–æ–≥: ' +
      '\n–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π')
time.sleep(1)


print('–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Ä—Å–∏–π –∫—Ä–æ–º–µ Standart –ø–æ–∫–∞ –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è!')
while True:

    value, error = read_file('config.txt', 2, 'read')
    if error:
        print(error)
        print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ config.txt')
        new_value = input('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å? –í–µ—Ä—Å–∏–∏: 1. Standart 2. Lite 3. Pro\n–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ü–∏—Ñ—Ä—É –±–µ–∑ –¥–æ–ø –∑–Ω–∞—á–µ–Ω–∏–π: ')
        try:
            _, message = read_file('config.txt', 2, 'replace', new_value=new_value)
            print(message)
        except ValueError as e:
            print(str(e))
            print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ config.txt')
            new_value = input('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å? –í–µ—Ä—Å–∏–∏: 1. Standart 2. Lite 3. Pro\n –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ü–∏—Ñ—Ä—É –±–µ–∑ –¥–æ–ø –∑–Ω–∞—á–µ–Ω–∏–π: ')
            _, message = read_file('config.txt', 2, 'replace', new_value=new_value)
            print(message)
    elif value == '1':

        import random
        import requests
        import telebot
        from telebot import types
        import os
        import sys
        from datetime import datetime
        import statistics
        import ping3
        import speedtest
        import threading
        import json


        print('\n\n\n–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ Standart\n\n\n')
        time.sleep(1)

        state = None
        mes = None
        values = {}
        task_tg = None
        tokens = ['', '', '']
        Versoin = '3.9'
        Change_log = '\n1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏.' \
                     '\n2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3.9 –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø—É—Å–∫–∞ 1.1'
        id_tg = ''
        text_tg_bot = None

        print("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Yt_monster –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://ytmonster.ru/api/#key –∏–ª–∏ https://clifl.com/api/#key "
              "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://t.me/BotFather\nTelegram –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://t.me/GODIMONGO"
              "\n–í–µ—Ä—Å–∏—è:" + Versoin + '\n' + Change_log + '\n' * 2)
        time.sleep(2)
        yt_monster.log('–°—Ç–∞—Ä—Ç –±–æ—Ç–∞')


        def balase_task(token):
            token_work = token[0]
            token_task = token[1]
            while True:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    req = requests.get('https://app.ytmonster.ru/api/?balance=get&token=' + token_work)
                    json1 = json.loads(req.text)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –≤ —Ñ–∞–π–ª
                    a, err = yt_monster.ytmonster_error(json1["error"])
                    if err == 'ok':
                        with open('balance.txt', 'a') as f:
                            f.write(f'{json1["response"]["balance"]}\n')
                    else:
                        time.sleep(10)
                        yt_monster.log('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ! –ü–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞')

                    # –ñ–¥–µ–º 24 —á–∞—Å–∞
                    time.sleep(24 * 60 * 60)
                except requests.exceptions.RequestException:
                    time.sleep(10)
                    yt_monster.log('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ! –ü–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞')


        def client_task(token):
            token_work = token[0]
            status = True
            while True:
                try:
                    req = requests.get('https://app.ytmonster.ru/api/?get-clients=get&token=' + token_work)
                    json1 = json.loads(req.text)
                    a, err = yt_monster.ytmonster_error(json1["error"])
                    if err != 'ok':
                        yt_monster.log('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ! –ü–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞')
                    elif req.text == """{"error":0,"response":[]}""":
                        if status == True:
                            status = False
                            bot.send_message(id_tg, '–ü–æ—Ö–æ–∂–µ —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã!')
                    else:
                        status = True
                    time.sleep(10)
                except requests.exceptions.RequestException:
                    yt_monster.log('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ! –ü–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞')


        TOKEN_NAMES = ['telegram –±–æ—Ç–∞', 'Ytmonster (–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π)', 'Ytmonster (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π)']


        def read_tokens():
            try:
                with open('token.txt', 'r') as f:
                    tokens = [line.strip() for line in f]
            except FileNotFoundError:
                print('token.txt err: FileNotFoundError')
                tokens = []
            return tokens


        def write_tokens(tokens):
            with open('token.txt', 'w') as f:
                f.write('\n'.join(tokens))


        def get_token(tokens, index, name):
            try:
                if not tokens[index]:
                    tokens[index] = input(f'–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω {name}: ')
            except IndexError:
                tokens.append(input(f'–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω {name}: '))


        def check_ytmonster_token(tokens, index):
            while True:
                req, err = yt_monster.ytmonster_req(tokens[1:], 'balance' if index == 1 else 'my_task',
                                                    'ytview' if index == 2 else '')
                if err == 'ok':
                    break
                tokens[index] = input(
                    f'–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Ytmonster ({"–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π" if index == 1 else "–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"}): ')
                write_tokens(tokens)


        def check_telegram_bot_token(tokens):
            print('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Telegram –±–æ—Ç–∞')
            print('ping: api.telegram.org ...')
            time.sleep(1)
            while True:
                req = requests.get(f'https://api.telegram.org/bot{tokens[0]}/getMe')
                if req.status_code == 200:
                    break
                print("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!\n–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω telegram –±–æ—Ç–∞:")
                tokens[0] = input('')
                write_tokens(tokens)


        tokens = read_tokens()

        for i, token_name in enumerate(TOKEN_NAMES):
            get_token(tokens, i, token_name)

        write_tokens(tokens)

        check_ytmonster_token(tokens, 1)
        check_ytmonster_token(tokens, 2)

        check_telegram_bot_token(tokens)

        yt_monster.log('–í—Å–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≤–µ—Ä–Ω—ã')


        token_ytmonster = [tokens[1], tokens[2]]
        balase_task_thread = threading.Thread(target=balase_task, args=(token_ytmonster,))
        balase_task_thread.start()

        client_task_thread = threading.Thread(target=client_task, args=(token_ytmonster,))
        client_task_thread.start()


        def button_start():
            keyboard = types.InlineKeyboardMarkup()

            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            balance = types.InlineKeyboardButton(text='üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
            version = types.InlineKeyboardButton(text='üåü –í–µ—Ä—Å–∏—è', callback_data='version')
            keyboard.row(balance, version)

            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            get_client = types.InlineKeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', callback_data='get_client')
            keyboard.row(get_client)

            # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            my_task = types.InlineKeyboardButton(text='üìù –ó–∞–¥–∞–Ω–∏—è', callback_data='my_task')
            send_log = types.InlineKeyboardButton(text='üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥', callback_data='send_log')
            keyboard.row(my_task, send_log)

            # –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            speedtest = types.InlineKeyboardButton(text='üåê –°–∫–æ—Ä–æ—Å—Ç—å', callback_data='speedtest')
            ping = types.InlineKeyboardButton(text='üèì –ü–∏–Ω–≥', callback_data='ping')
            keyboard.row(speedtest, ping)

            change_token = types.InlineKeyboardButton(text='üîë –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', callback_data='change_token_telegram')
            add_task = types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='add_task')
            keyboard.row(add_task, change_token)

            clear_log = types.InlineKeyboardButton(text='üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥', callback_data='clear_log')
            add_id = types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', callback_data='ID_Telegram')
            keyboard.row(clear_log, add_id)
            change = types.InlineKeyboardButton(text='üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω ytmonster', callback_data='change_token_ytmonster')
            keyboard.row(change)
            return keyboard


        try:
            id_tg, error = read_file('config.txt', 1, 'read')
            if error:
                raise FileNotFoundError(f'config.txt is missing or empty')
            id_tg = id_tg.replace(' ', '')
            if id_tg == '':
                text_tg_bot = str(random.randint(1000, 9999))
                print('\n\n\n–ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–µ –∑–Ω–∞–µ–º –≤–∞—à ID –≤ Telegram! '
                      '\n–í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤) '
                      f'\n–¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {text_tg_bot}. '
                      '\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!')
                input('')
            else:
                id_tg = int(id_tg)
        except (FileNotFoundError, ValueError):
            text_tg_bot = str(random.randint(1000, 9999))
            print('\n\n\n–ö–∞–∂–µ—Ç—Å—è, –º—ã –Ω–µ –∑–Ω–∞–µ–º –≤–∞—à ID –≤ Telegram! '
                  '\n–í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤) '
                  f'\n–¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {text_tg_bot}. '
                  '\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!')
            input('')


        bot = telebot.TeleBot(str(tokens[0]))
        print('\n' * 4)
        if id_tg != '':
            bot.send_message(id_tg, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: /start')
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        yt_monster.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


        @bot.message_handler(commands=["help"])
        def help_command(message):
            text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start (—Å—Ç–∞—Ä—Ç)\n/unpin (–æ—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n–ù–µ–º–Ω–æ–≥–æ –æ –±–æ—Ç–µ: –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–º ytmonster.ru (clifl.com) –ê —Ç–∞–∫ –∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π!"
            bot.send_message(message.chat.id, text)


        @bot.message_handler(commands=["start"])
        def start(message):
            chat_id = message.chat.id
            message_text = '–ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ'
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            pinned_message = bot.get_chat(chat_id).pinned_message
            if pinned_message is None or pinned_message.text != message_text:
                # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = bot.send_message(chat_id, message_text)
                bot.pin_chat_message(chat_id, sent_message.message_id)
            time.sleep(0.1)
            bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEINtRkGK9SK6pHQrYy1aKnW-6ZcmlEjQAC8zAAAiP1yEgwajIpJJRmtS8E')
            keyboard_reply = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("/restart (–¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞)")
            button2 = types.KeyboardButton("/unpin (–¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è)")
            button3 = types.KeyboardButton("/start (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)")
            keyboard_reply.add(button1, button2)
            keyboard_reply.add(button3)
            bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=keyboard_reply)
            bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=button_start())


        @bot.message_handler(commands=['restart'])
        def restart_command(message):
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...")
            # –¥–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            os.execl(sys.executable, sys.executable, *sys.argv)


        @bot.message_handler(commands=["unpin"])
        def unpin_command(message):
            bot.unpin_chat_message(message.chat.id)
            bot.send_message(message.chat.id, '—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ')


        @bot.callback_query_handler(func=lambda call: True)  # –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏
        def callback_worker(call):
            global token_ytmonster, task_tg, mes, values
            keyboard_back = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
            keyboard_back.add(back)

            if call.data == "back":
                bot.send_message(call.from_user.id,
                                 text="Telegram –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://t.me/GODIMONGO\n–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:",
                                 reply_markup=button_start())
                bot.answer_callback_query(call.id)
                mes = None
                values = {}
                task_tg = None
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

            elif call.data == "balance":
                with open('balance.txt', 'r') as f:
                    balance = f.readlines()
                if len(balance) == 0:
                    bot.send_message(call.from_user.id, text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞.', reply_markup=keyboard_back)
                    yt_monster.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞.')
                else:
                    last_ten_days = balance[-10:]
                    stats = ''
                    for i in range(len(last_ten_days)):
                        stats += f'{i + 1} –¥–µ–Ω—å: {last_ten_days[i]}'

                    start_balance = float(last_ten_days[0].strip())
                    end_balance = float(last_ten_days[-1].strip())
                    balance_change = end_balance - start_balance
                    balance_percent = (balance_change / start_balance) * 100

                    req, err = yt_monster.ytmonster_req(token_ytmonster, 'balance')
                    if err != 'ok':
                        bot.send_message(call.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:' + err, reply_markup=keyboard_back)
                        yt_monster.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:' + err)
                        print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
                    else:
                        bot.send_message(call.from_user.id, text=f'üí∞ –ë–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {req} COIN\n\n'
                                                                 f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_ten_days)} –¥–Ω–µ–π:\n\n'
                                                                 f'{stats}\n\n'
                                                                 f'üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_ten_days)} –¥–Ω–µ–π: {balance_change:.2f} COIN ({balance_percent:.2f}%)\n',
                                         reply_markup=keyboard_back)
                        bot.answer_callback_query(call.id)
                        print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')



            elif call.data == "version":
                bot.send_message(call.from_user.id, text=str('–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: ' + str(
                    Versoin) + '\nTelegram –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://t.me/GODIMONGO' + '\n' + Change_log),
                                 reply_markup=keyboard_back)
                bot.answer_callback_query(call.id)
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

            elif call.data == "get_client":
                bot.send_message(call.from_user.id,
                                 '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è \nTelegram –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: https://t.me/GODIMONGO')
                req, err, ID_CLIENT = yt_monster.ytmonster_req(token_ytmonster, 'get_client')
                if req == 'not_work':
                    bot.send_message(call.from_user.id, text='–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.', reply_markup=keyboard_back)
                elif err != 'ok':
                    bot.send_message(call.from_user.id, text='–ü—Ä–æ–∏–∑–∞—à–ª–∞ –æ—à–∏–±–∫–∞:' + str(err), reply_markup=keyboard_back)
                else:
                    keyboard_client = types.InlineKeyboardMarkup(row_width=1)
                    for client_id in ID_CLIENT:
                        button = types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç:' + str(client_id),
                                                            callback_data='client_id_close' + str(client_id))
                        keyboard_client.add(button)
                    keyboard_client.add(back)
                    bot.send_message(call.from_user.id,
                                     text=str(req) + '\n----\n –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:',
                                     reply_markup=keyboard_client)
                bot.answer_callback_query(call.id)
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

            elif "client_id_close" in call.data:
                client_id = call.data.replace("client_id_close", "")
                req, err = yt_monster.ytmonster_req(token_ytmonster, 'close_client', id=client_id)
                if err != 'ok':
                    bot.send_message(call.from_user.id, text='–ü—Ä–æ–∏–∑–∞—à–ª–∞ –æ—à–∏–±–∫–∞:' + str(err), reply_markup=keyboard_back)
                else:
                    bot.send_message(call.from_user.id, text=str(req), reply_markup=keyboard_back)
                bot.answer_callback_query(call.id)
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

            elif call.data == "my_task":
                keyboard = types.InlineKeyboardMarkup()
                social_networks = [
                    {'text': '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'callback_data': 'vk'},
                    {'text': 'Instagram', 'callback_data': 'inst'},
                    {'text': 'TikTok', 'callback_data': 'tiktok'},
                    {'text': '–ü–ª–∞—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', 'callback_data': 'paid'},
                    {'text': 'Youtube –ø—Ä–æ—Å–º–æ—Ç—Ä—ã', 'callback_data': 'ytview'},
                    {'text': 'Youtube –ª–∞–π–∫–∏', 'callback_data': 'ytlike'},
                    {'text': 'Youtube –ø–æ–¥–ø–∏—Å—á–∏–∫–∏', 'callback_data': 'ytsubs'},
                    {'text': 'Youtube –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', 'callback_data': 'ytcomm'},
                    {'text': 'Telegram', 'callback_data': 'tg'},
                    {'text': '–ù–∞–∑–∞–¥', 'callback_data': 'back'}
                ]
                for social_network in social_networks:
                    keyboard.add(types.InlineKeyboardButton(**social_network))
                bot.send_message(call.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü. —Å–µ—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                                 reply_markup=keyboard)
                bot.answer_callback_query(call.id)
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

            elif call.data in ['vk', 'inst', 'tiktok', 'tg', 'paid', 'ytview', 'ytlike', 'ytsubs', 'ytcomm']:
                bot.send_message(call.from_user.id, text='–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ..')
                bot.answer_callback_query(call.id)
                req, err = yt_monster.ytmonster_req(token_ytmonster, 'my_task', call.data)
                bot.send_message(call.from_user.id, text=req, reply_markup=keyboard_back)
                print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

            elif call.data == 'send_log':
                bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞')
                log = open('log.txt', 'rb')
                bot.send_document(call.message.chat.id, log)
                log.close()
                bot.answer_callback_query(call.id)


            elif call.data == 'clear_log':
                with open('log.txt', 'w') as f:
                    f.write('\nclear log: ' + str(datetime.now()))
                    f.close()
                    bot.send_message(call.from_user.id, text='–õ–æ–≥ –æ—á–∏—â–µ–Ω.', reply_markup=keyboard_back)
                    bot.answer_callback_query(call.id)

            elif call.data == 'speedtest':
                bot.send_message(call.from_user.id, text='–ó–∞–º–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è...')
                bot.answer_callback_query(call.id)
                st = speedtest.Speedtest()
                download_speeds = []
                upload_speeds = []
                keyboard = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
                keyboard.add(back)

                for i in range(5):
                    download_speed = st.download() / 1000000  # —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ú–±–∏—Ç/—Å
                    upload_speed = st.upload() / 1000000  # —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≥—Ä—É–∑–∫–∏ –≤ –ú–±–∏—Ç/—Å
                    download_speeds.append(download_speed)
                    upload_speeds.append(upload_speed)
                    bot.send_message(call.from_user.id,
                                     text=f"–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ {i + 1}: {download_speed:.2f} –ú–±–∏—Ç/—Å" + '\n' + f"–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ {i + 1}: {upload_speed:.2f} –ú–±–∏—Ç/—Å")
                avg_download_speed = sum(download_speeds) / len(download_speeds)
                avg_upload_speed = sum(upload_speeds) / len(upload_speeds)
                bot.send_message(call.from_user.id,
                                 text=f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: {avg_download_speed:.2f} –ú–±–∏—Ç/—Å" + '\n' + f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: {avg_upload_speed:.2f} –ú–±–∏—Ç/—Å",
                                 reply_markup=keyboard)


            elif call.data == 'ping':
                servers = [
                    '8.8.8.8',
                    '208.67.222.222',
                    '168.95.1.1',
                    '114.114.114.114',
                    '203.0.178.191',
                    '91.239.100.100',
                    '176.103.130.130',
                    '89.233.43.71',
                    '77.88.8.8',
                    '1.1.1.1',
                    '9.9.9.9',
                    '8.26.56.26',
                    '185.228.168.168',
                    '109.69.8.51',
                    '80.80.80.80',
                    '77.88.8.1',
                    '1.0.0.1',
                    '80.80.81.81',
                    '156.154.70.1',
                    '208.67.220.220',
                    '8.8.4.4',
                    '156.154.71.1',
                    '9.9.9.10',
                    '84.200.69.80',
                    '84.200.70.40',
                    '195.46.39.39',
                    '195.46.39.40',
                    '208.67.222.220',
                    '77.88.8.88',
                    '8.8.8.4'
                ]
                PING_EMOJI = "üèì"
                CHECKING_EMOJI = "üîé"
                UP_ARROW_EMOJI = "üî∫"
                DOWN_ARROW_EMOJI = "üîª"
                MEDIAN_EMOJI = "üîò"
                response_times = []
                chat_id = call.message.chat.id
                bot.answer_callback_query(call.id)
                # send a new message to indicate that the bot is checking the servers
                a = bot.send_message(chat_id, f"{CHECKING_EMOJI} –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
                message_id = a.message_id
                for server in servers:
                    response_time = ping3.ping(server)
                    if response_time is not None:
                        response_time = round(response_time, 3)
                        response_times.append(response_time)
                        # edit the original message to show the ping time for each server
                        bot.edit_message_text(f"{PING_EMOJI} Ping —Å–µ—Ä–≤–µ—Ä–∞: {server} –∑–∞–Ω—è–ª: {response_time} —Å–µ–∫", chat_id,
                                              message_id)
                    else:
                        # edit the original message to show that the server did not respond
                        yt_monster.log(f"–°–µ—Ä–≤–µ—Ä: {server} –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞")
                        bot.edit_message_text(f"{PING_EMOJI} –°–µ—Ä–≤–µ—Ä: {server} –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞", chat_id, message_id)

                if response_times:
                    avg_response_time = statistics.mean(response_times)
                    median_response_time = statistics.median(response_times)
                    max_response_time = max(response_times)
                    min_response_time = min(response_times)
                    # calculate the percentage change from the first to last server ping
                    pct_change = round((response_times[-1] - response_times[0]) / response_times[0] * 100, 2)
                    # determine whether the overall trend is up or down
                    if response_times[0] < response_times[-1]:
                        trend_emoji = UP_ARROW_EMOJI
                    elif response_times[0] > response_times[-1]:
                        trend_emoji = DOWN_ARROW_EMOJI
                    else:
                        trend_emoji = MEDIAN_EMOJI
                    # edit the original message to show the ping statistics
                    bot.edit_message_text(f"{PING_EMOJI} –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {round(avg_response_time, 3)} —Å–µ–∫\n"
                                          f"{PING_EMOJI} –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {median_response_time} —Å–µ–∫\n"
                                          f"{PING_EMOJI} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {max_response_time} —Å–µ–∫\n"
                                          f"{PING_EMOJI} –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {min_response_time} —Å–µ–∫\n"
                                          f"{PING_EMOJI} –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–µ—Ä–≤–µ—Ä—É: {pct_change}% {trend_emoji}",
                                          chat_id, message_id, reply_markup=keyboard_back)
                else:
                    # edit the original message to show that no server responded
                    bot.edit_message_text("–ù–µ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞!", chat_id, message_id, reply_markup=keyboard_back)

            elif call.data == 'add_task':
                if id_tg == call.data:
                    task_tg = 'add_task'
                    bot.send_message(call.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞!"
                                                             "\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∞–π–¥–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–µ–ª config.txt")
                    bot.send_message(call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è!(–£—á–∏—Ç—ã–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä) '
                                                             '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:'
                                                             '\n–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Ä–µ–∞–∫—Ü–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:'
                                                             '\nlike_tg'
                                                             '\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:'
                                                             '\nview_tg', reply_markup=keyboard_back)
                    bot.answer_callback_query(call.id)
                else:
                    bot.send_message(call.from_user.id, text='')

            elif call.data == 'change_token_ytmonster':
                task_tg = 'change_token_ytmonster'
                bot.send_message(call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω(–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π):',
                                 reply_markup=keyboard_back)
                bot.answer_callback_query(call.id)

            elif call.data == 'change_token_telegram':
                global old_tokens
                task_tg = 'change_token_telegram'
                with open('token.txt') as f:
                    old_tokens = f.read().splitlines()
                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                bot.send_message(call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:', reply_markup=keyboard_back)
                bot.answer_callback_query(call.id)

            elif call.data == 'ID_Telegram':
                bot.send_message(call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:')
                task_tg = 'id'

            elif call.data == 'work_task':
                keyboard = types.InlineKeyboardMarkup()
                add_accaunt = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='add_accaunt')
                del_accaunt = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='del_accaunt')
                keyboard.row(add_accaunt, del_accaunt)
                bot.send_message(call.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=keyboard)

            elif call.data == 'create_task':
                chat_id = call.from_user.id
                err = ''
                if task_tg == 'like_tg':
                    req, err = yt_monster.yt_monster_create_task_tg(values[chat_id][0], values[chat_id][1],
                                                                    token_ytmonster,
                                                                    values[chat_id][2],
                                                                    values[chat_id][3],
                                                                    values[chat_id][4],
                                                                    task_coin=values[chat_id][5])
                elif task_tg == 'view_tg':
                    req, err = yt_monster.yt_monster_create_task_tg(values[chat_id][0], values[chat_id][1],
                                                                    token_ytmonster,
                                                                    task_count=values[chat_id][2],
                                                                    task_valh=values[chat_id][3],
                                                                    task_coin=100)
                values[chat_id] = []
                if err != 'ok':
                    bot.send_message(call.from_user.id,
                                     text='–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∞–π—Ç–∞:   ' + err + '\n–ü–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞:  ' + req,
                                     reply_markup=keyboard_back)
                else:
                    bot.send_message(call.from_user.id, text='–û—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞: ' + req + '  –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!',
                                     reply_markup=keyboard_back)


        @bot.message_handler(func=lambda message: True, content_types=['text'])
        def handle_message(message):
            global tokens, values, mes, task_tg, text_tg_bot, id_tg, token_ytmonster, state
            keyboard_back = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
            keyboard_back.add(back)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—ã–π –ª–∏ —Ç–æ–∫–µ–Ω

            if task_tg == 'change_token_telegram':
                if int(id_tg) != int(message.from_user.id):
                    bot.send_message(message.from_user.id, text="–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞!"
                                                                "\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∞–π–¥–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–µ–ª config.txt",
                                     reply_markup=keyboard_back)
                    return

                try:
                    bot_new = telebot.TeleBot(message.text)
                    bot_new.get_me()
                except Exception as e:
                    bot.send_message(message.from_user.id, text="–û—à–∏–±–∫–∞: " + str(e), reply_markup=keyboard_back)
                    task_tg = ''
                    return
                # –¢–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π, –º–µ–Ω—è–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–µ
                bot.token = message.text
                with open('token.txt', 'w') as f:
                    f.write('\n'.join([message.text] + old_tokens[1:]))
                bot.send_message(message.from_user.id, text="–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                task_tg = ''
                time.sleep(2)
                bot.send_sticker(message.chat.id,
                                 'CAACAgIAAxkBAAEINtRkGK9SK6pHQrYy1aKnW-6ZcmlEjQAC8zAAAiP1yEgwajIpJJRmtS8E')
                bot.send_message(message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=button_start())

            elif task_tg == 'add_task':
                chat_id = message.chat.id
                keyboard = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
                keyboard.add(back)
                if mes == None:
                    mes = message.text
                if mes == 'like_tg':
                    if chat_id not in values:
                        values[chat_id] = []
                    count = len(values[chat_id])
                    if count < 5:
                        values[chat_id].append(message.text)
                        if count == 0:
                            bot.send_message(chat_id,
                                             '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (–ü—Ä–∏–º–µ—Ä: https://t.me/channel_name/post_id): ')
                        elif count == 1:
                            bot.send_message(chat_id,
                                             '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ enter –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n—Ä–µ–∫—Ü–∏—è: –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é\nüëè: 25\nüòÅ: 25\nü§Ø: 25\n(–í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100%)')
                        elif count == 2:
                            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.')
                        elif count == 3:
                            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —á–∞—Å.')
                        elif count == 4:
                            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ COIN –∑–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.')
                    elif count == 5:
                        values[chat_id].append(message.text)
                        reactions = {}
                        try:
                            for line in values[chat_id][2].split('\n'):
                                reaction, percentage = line.split(':')
                                reactions[reaction.strip()] = int(percentage.strip())
                            values[chat_id][2] = reactions
                        except ValueError:
                            bot.send_message(chat_id,
                                             '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ValueError. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ —Ä–µ–∞–∫—Ü–∏–π –∏ –∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
                            values[chat_id] = []
                            task_tg = 'add_task'
                            return
                        task = types.InlineKeyboardButton(text='–î–∞', callback_data='create_task', reply_markup=keyboard)
                        keyboard.add(task)
                        req, err = yt_monster.ytmonster_req(token_ytmonster, 'balance')
                        if err != 'ok':
                            result = '\n–¢–∏–ø: ' + values[chat_id][0] + '\n–°—Å—ã–ª–∫–∞: ' + values[chat_id][
                                1] + '\n–†–µ–∞–∫—Ü–∏–∏: ' + str(
                                values[chat_id][2]) + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ' + values[chat_id][3] + \
                                     '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —á–∞—Å: ' + values[chat_id][4] + \
                                     '\n–¶–µ–Ω–∞ –∑–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ' + values[chat_id][5] + \
                                     '\n–í—Å–µ –≤–µ—Ä–Ω–æ?'
                        else:
                            result = '\n–¢–∏–ø: ' + values[chat_id][0] + '\n–°—Å—ã–ª–∫–∞: ' + values[chat_id][
                                1] + '\n–†–µ–∞–∫—Ü–∏–∏: ' + str(
                                values[chat_id][2]) + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ' + values[chat_id][3] + \
                                     '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —á–∞—Å: ' + values[chat_id][4] + \
                                     '\n–¶–µ–Ω–∞ –∑–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: ' + values[chat_id][5] + \
                                     '\n–í–∞—à –±–∞–ª–∞–Ω—Å:' + str(req) + \
                                     '\n–ë—É–¥–µ—Ç –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: ' + str(int(values[chat_id][5]) * int(values[chat_id][3])) + \
                                     '\n–í—Å–µ –≤–µ—Ä–Ω–æ?'
                        task_tg = ''
                        del req
                        bot.send_message(chat_id, result, reply_markup=keyboard)

                elif mes == 'view_tg':
                    chat_id = message.chat.id
                    if chat_id not in values:
                        values[chat_id] = []
                    count = len(values[chat_id])
                    if count < 3:
                        values[chat_id].append(message.text)
                        if count == 0:
                            bot.send_message(chat_id,
                                             '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (–ü—Ä–∏–º–µ—Ä: https://t.me/channel_name/post_id): ')
                        elif count == 1:
                            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.')
                        elif count == 2:
                            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —á–∞—Å.')
                    elif count == 3:
                        values[chat_id].append(message.text)
                        task = types.InlineKeyboardButton(text='–î–∞', callback_data='create_task')
                        keyboard.add(task)
                        req, err = yt_monster.ytmonster_req(token_ytmonster, 'balance')
                        if err != 'ok':
                            result = '\n–¢–∏–ø: ' + values[chat_id][0] + '\n–°—Å—ã–ª–∫–∞: ' + values[chat_id][
                                1] + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ' + values[chat_id][
                                         2] + '\n–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —á–∞—Å: ' + values[chat_id][
                                         3] + '\n–¶–µ–Ω–∞ –∑–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ: 100 COIN (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)' + '\n–í—Å–µ –≤–µ—Ä–Ω–æ?'
                        else:
                            result = '\n–¢–∏–ø: ' + values[chat_id][0] + '\n–°—Å—ã–ª–∫–∞: ' + values[chat_id][
                                1] + '\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: ' + values[chat_id][
                                         2] + '\n–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤ —á–∞—Å: ' + values[chat_id][
                                         3] + '\n–¶–µ–Ω–∞ –∑–∞ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ: 100 COIN (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)' + \
                                     '\n–í–∞—à –±–∞–ª–∞–Ω—Å:' + str(req) + '–ë—É–¥–µ—Ç –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: ' + str(int(values[chat_id][2]) * 100) \
                                     + '\n–í—Å–µ –≤–µ—Ä–Ω–æ?'
                        task_tg = 'view_tg'
                        del req
                        bot.send_message(chat_id, result, reply_markup=keyboard)

                else:
                    bot.send_message(chat_id,
                                     '–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:  like',
                                     reply_markup=keyboard)
                    mes = None

            elif task_tg == 'id':
                if text_tg_bot == message.text:
                    try:
                        _, file = read_file('config.txt', 1, 'replace', new_value=str(message.from_user.id))
                        print(file)
                        bot.send_message(message.from_user.id,
                                         '–í–∞—à –∞–π–¥–∏: ' + str(message.from_user.id) + ' –ë—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
                                         reply_markup=keyboard_back)
                    except:
                        bot.send_message(message.from_user.id,
                                         '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞',
                                         reply_markup=keyboard_back)

                else:
                    bot.send_message(message.from_user.id, '–ü–æ—Ö–æ–∂–µ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∫–æ–¥–µ! –ü–æ—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')
                    task_tg = ''

            elif task_tg == 'change_token_ytmonster':
                print(message.text)

                if state == None:
                    a = [str(message.text), '']
                    bot.send_message(message.chat.id, 'ping: ytmonster.ru ...')
                    req, err = yt_monster.ytmonster_req(a, 'balance')
                    if err != 'ok':
                        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –≤ —Ç–æ–∫–µ–Ω–µ: ' + str(err))
                        task_tg = ''
                    else:
                        bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω –≤–µ—Ä–µ–Ω!')
                        state = ''
                        token_ytmonster = [str(message.text), token_ytmonster[1]]
                        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π):')
                else:
                    a = ['', str(message.text)]
                    bot.send_message(message.chat.id, 'ping: ytmonster.ru ...')
                    req, err = yt_monster.ytmonster_req(a, 'my_task', 'ytview')
                    if err != 'ok':
                        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –≤ —Ç–æ–∫–µ–Ω–µ: ' + str(err))
                        task_tg = ''
                    else:
                        token_ytmonster = [token_ytmonster[0], str(message.text)]
                        tokens = [tokens[0], token_ytmonster[0], token_ytmonster[1]]
                        bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω –≤–µ—Ä–µ–Ω!')
                        with open('token.txt', 'w') as f:
                            f.write('\n'.join(map(str, tokens)))
                        state = None
                        bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=keyboard_back)
                        task_tg = ''

            else:
                keyboard = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton(text='–ì–ª. –º–µ–Ω—é', callback_data='back')
                keyboard.add(back)
                bot.send_message(message.from_user.id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                                 reply_markup=keyboard)


        bot.infinity_polling(none_stop=True, interval=0)

    elif value == '2':
        print('Text for condition 2')
    elif value == '3':
        print('Text for condition 3')
    else:
        print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ config.txt')
        new_value = input('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å? –í–µ—Ä—Å–∏–∏: 1. Standart 2. Lite 3. Pro\n –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ü–∏—Ñ—Ä—É –±–µ–∑ –¥–æ–ø –∑–Ω–∞—á–µ–Ω–∏–π: ')
        try:
            _, message = read_file('config.txt', 2, 'replace', new_value=new_value)
            print(message)
        except ValueError as e:
            print(str(e))
            print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ config.txt')
            new_value = input('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å? –í–µ—Ä—Å–∏–∏: 1. Standart 2. Lite 3. Pro\n –í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ü–∏—Ñ—Ä—É –±–µ–∑ –¥–æ–ø –∑–Ω–∞—á–µ–Ω–∏–π: ')
            _, message = read_file('config.txt', 2, 'replace', new_value=new_value)
            print(message)
